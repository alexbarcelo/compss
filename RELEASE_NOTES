---------------------------̣---
  COMP SUPERSCALAR FRAMEWORK
------------------------------

COMP Superscalar (COMPSs) is a programming model that aims to ease the development of applications for distributed infrastructures,
such as Clusters, Grids and Clouds. COMP superscalar also features a runtime system that exploits the inherent parallelism of 
applications at execution time.

Release number: 2.7 Hyacinth 
Release date: June-2020
-------------------------------
New features:
         * Runtime:
		- New trace events and cfg to see task constraints.
		- New task constraint option  for storage bandwidth.
		- Directories as task dependency type.
		- New IO tasks which can be overlapped with computational tasks.
		- New "weight" parameter property to prioritise data in data location schedulers.
		- New "keep rename" parameter property to enable/disable conversion to original names at worker.
		- New API call to check if a file exists or it is going to be generated by a task.
		- Support for MPI+OpenMP hybrid tasks. 

         * Python:
		- Support for Python type hinting.
                - Support for executing Jupyter notebooks in myBinder.
		- PyCOMPSs player - a container based environment to easily install and use PyCOMPSs/COMPSs.

	* DDS-2:
		 - Combination and execution of multiple operations within a single task.
		 - New methods and optimizations in DDS class.
Improvements:
	 - Change in MPI tasks syntax. ComputingNodes property has been changed to processes.
	 - New flags in enqueue_compss to provide a port range to deploy workers (--worker_port_range), generate a core dump (--gen_coredump) and allow JMX connections for JVM profiling (--jmx_port) 
	 - Support for collections with direction OUT.
         - Support for short labels in traces (Requires latest Paraver version for a correct visualization
         - Avoid failure in compss_wait_on_file if the file has not been previously used by a task
         - Support for task with "isReplicated" properties in shared file systems. 
	 - Optimizations in data synchronizations in shared file systems.
	 - Support for TCS as job scheduler in clusters
	 - Configuration files for Salomon and Starlife clusters
	 - Several Bug fixes

Known Limitations:
         - Tasks that invoke Numpy and MKL may experience issues if a different MKL threads count is used in different tasks. This is due to the fact that MKL reuses  threads in the different calls and it does not change the number of threads from one call to another. This can be also happen with other libraries implemented with OpenMP.
         - C++ Objects declared as arguments in coarse-grain tasks must be passed as object pointers in order to have proper dependency management.
         - Master as worker is not working for executions with persistent worker in C++.
	 - Coherence and concurrent writing in parameters annotated with the "Concurrent" direction must be managed by the underlying distributed storage system.
	 - Delete file calls for files used as input can produce a significant synchronization of the main code.
	 - Defining a parameter as OUT is only allowed for files and collection files.   

For further information, please refer to “COMPSs User Manual: Application development guide”.

Please find more details about the COMP Superscalar framework at: 
		http://compss.bsc.es/
