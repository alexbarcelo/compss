#!/bin/bash
# Obtain parameters

COMPSs_exec=$1
comm=$2
runcompss_opts=$3
base_app_dir=$4
COMPSs_log_folder=$5
target_log_folder=$6
retry_num=$7
execution_envs=$8

# Global variables
AGENT_PIDS=""
exit_value=0
NUM_RETRIES="50"
jar_name="1_tracing_agents.jar"
app_name="tracing.Agents"


# Traps and Handlers
function kill_agents() {
    for pid in ${AGENT_PIDS}; do
        kill -SIGINT ${pid} 1>/dev/null 2>/dev/null
    done
}
trap kill_agents EXIT


#----------------------------------------------------------------------------------
# Generate Project.xml according to system
sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

#----------------------------------------------------------------------------------
# Create all working dir folders
mkdir -p /tmp/COMPSsWorker01/

#----------------------------------------------------------------------------------
# Run application
echo **************************************************************
echo **************************************************************
echo "*** RUNNING JAVA AGENTS APPLICATION TRACING"
echo **************************************************************
echo **************************************************************
log_dir="${COMPSs_log_folder}/${app_name}_0${retry_num}/"
mkdir -p "${log_dir}"
output_log="${log_dir}test.outputlog"
error_log="${log_dir}test.errorlog"
touch "${output_log}"
touch "${error_log}"

# ---------------------------------------
# ---------- STARTING AGENTS ------------
# ---------------------------------------
agent1_log_dir="${log_dir}/agent1/"
mkdir -p "${agent1_log_dir}" 
agent1_output_log="${log_dir}/agent1.outputlog"
agent1_error_log="${log_dir}/agent1.errorlog"

compss_agent_start \
    --hostname="COMPSsWorker01" \
    --classpath="${base_app_dir}/${jar_name}" \
    --log_dir="${agent1_log_dir}" \
    --rest_port="46101" \
    --comm_port="46102" \
    --reuse_resources_on_block="false" \
    --debug \
    --tracing=true \
    ${runcompss_opts} \
    --project="${base_app_dir}/project.xml" \
    --resources="${base_app_dir}/resources.xml" 1>"${agent1_output_log}" 2>"${agent1_error_log}" &

agent_pid="$!"
AGENT_PIDS="${AGENT_PIDS} ${agent_pid}"


agent2_log_dir="${log_dir}/agent2/"
mkdir -p "${agent2_log_dir}" 
agent2_output_log="${log_dir}/agent2.outputlog"
agent2_error_log="${log_dir}/agent2.errorlog"

compss_agent_start \
    --hostname="COMPSsWorker02" \
    --classpath="${base_app_dir}/${jar_name}" \
    --log_dir="${agent2_log_dir}" \
    --rest_port="46201" \
    --comm_port="46202" \
    --reuse_resources_on_block="false" \
    --debug \
    --tracing=true \
    ${runcompss_opts} \
    --project="${base_app_dir}/project.xml" \
    --resources="${base_app_dir}/resources.xml" 1>"${agent2_output_log}" 2>"${agent2_error_log}" &

agent_pid="$!"
AGENT_PIDS="${AGENT_PIDS} ${agent_pid}"

agent3_log_dir="${log_dir}/agent3/"
mkdir -p "${agent3_log_dir}" 
agent3_output_log="${log_dir}/agent3.outputlog"
agent3_error_log="${log_dir}/agent3.errorlog"
compss_agent_start \
    --hostname="COMPSsWorker03" \
    --classpath="${base_app_dir}/${jar_name}" \
    --log_dir="${agent3_log_dir}" \
    --rest_port="46301" \
    --comm_port="46302" \
    --reuse_resources_on_block="false" \
    --debug \
    --tracing=true \
    ${runcompss_opts} \
    --project="${base_app_dir}/project.xml" \
    --resources="${base_app_dir}/resources.xml" 1>"${agent3_output_log}" 2>"${agent3_error_log}" &

agent_pid="$!"
AGENT_PIDS="${AGENT_PIDS} ${agent_pid}"

agent4_log_dir="${log_dir}/agent4/"
mkdir -p "${agent4_log_dir}" 
agent4_output_log="${log_dir}/agent4.outputlog"
agent4_error_log="${log_dir}/agent4.errorlog"

compss_agent_start \
    --hostname="COMPSsWorker04" \
    --classpath="${base_app_dir}/${jar_name}" \
    --log_dir="${agent4_log_dir}" \
    --rest_port="46401" \
    --comm_port="46402" \
    --reuse_resources_on_block="false" \
    --debug \
    --tracing=true \
    ${runcompss_opts} \
    --project="${base_app_dir}/project.xml" \
    --resources="${base_app_dir}/resources.xml" 1>"${agent4_output_log}" 2>"${agent4_error_log}" &

agent_pid="$!"
AGENT_PIDS="${AGENT_PIDS} ${agent_pid}"

sleep 5

retries="${NUM_RETRIES}"
curl -XGET http://127.0.0.1:46101/COMPSs/test 1>/dev/null 2>/dev/null
exit_value=$?
while [ ! "${exit_value}" == "0" ] && [ "${retries}" -gt "0" ]; do
    sleep 1
    retries=$((retries - 1 ))
    curl -XGET http://127.0.0.1:46101/COMPSs/test 1>/dev/null 2>/dev/null
    exit_value=$?
done

retries="${NUM_RETRIES}"
curl -XGET http://127.0.0.1:46201/COMPSs/test
exit_value=$?
while [ ! "${exit_value}" == "0" ] && [ "${retries}" -gt "0" ]; do
sleep 1
    retries=$((retries - 1 ))
    curl -XGET http://127.0.0.1:46201/COMPSs/test
    exit_value=$?
done

retries="${NUM_RETRIES}"
curl -XGET http://127.0.0.1:46301/COMPSs/test
exit_value=$?
while [ ! "${exit_value}" == "0" ] && [ "${retries}" -gt "0" ]; do
    sleep 1
    retries=$((retries - 1 ))
    curl -XGET http://127.0.0.1:46301/COMPSs/test
    exit_value=$?
done

retries="${NUM_RETRIES}"
curl -XGET http://127.0.0.1:46401/COMPSs/test
exit_value=$?
while [ ! "${exit_value}" == "0" ] && [ "${retries}" -gt "0" ]; do
    sleep 1
    retries=$((retries - 1 ))
    curl -XGET http://127.0.0.1:46401/COMPSs/test
    exit_value=$?
done

RESULT=$(grep "test invoked" "${agent1_output_log}")
if [ -z "${RESULT}" ]; then  
    echo "Agent 1 failed to start" > >(tee -a "${error_log}")
    exit 1
fi
echo "Agent 1 started" > >(tee -a "${output_log}")

RESULT=$(grep "test invoked" "${agent2_output_log}")
if [ -z "${RESULT}" ]; then  
    echo "Agent 2 failed to start" > >(tee -a "${error_log}")
    exit 1
fi
echo "Agent 2 started" > >(tee -a "${output_log}")

RESULT=$(grep "test invoked" "${agent3_output_log}")
if [ -z "${RESULT}" ]; then  
    echo "Agent 3 failed to start" > >(tee -a "${error_log}")
    exit 1
fi
echo "Agent 3 started" > >(tee -a "${output_log}")

RESULT=$(grep "test invoked" "${agent4_output_log}")
if [ -z "${RESULT}" ]; then  
    echo "Agent 4 failed to start" > >(tee -a "${error_log}")
    exit 1
fi
echo "Agent 4 started" > >(tee -a "${output_log}")

# ------------------------------------------
# ----- ADDING AGENTS 2-4 TO AGENT 1 -------
# ------------------------------------------
echo "Adding additional resources: 1 CPU core." > >(tee -a "${output_log}")
"${COMPSS_HOME}/Runtime/scripts/user/compss_agent_add_resources" \
    --agent_node="COMPSsWorker01" \
    --agent_port="46101" \
    --comm="es.bsc.compss.agent.comm.CommAgentAdaptor" \
    --cpu=1 \
    "COMPSsWorker02" "Port=46202" > >(tee -a "${output_log}")  2> >(tee -a "${error_log}") 
sleep 1

echo "Adding additional resources: 1 CPU core." > >(tee -a "${output_log}")
"${COMPSS_HOME}/Runtime/scripts/user/compss_agent_add_resources" \
    --agent_node="COMPSsWorker01" \
    --agent_port="46101" \
    --comm="es.bsc.compss.agent.comm.CommAgentAdaptor" \
    --cpu=1 \
    "COMPSsWorker03" "Port=46302" > >(tee -a "${output_log}")  2> >(tee -a "${error_log}") 
sleep 1

echo "Adding additional resources: 1 CPU core." > >(tee -a "${output_log}")
"${COMPSS_HOME}/Runtime/scripts/user/compss_agent_add_resources" \
    --agent_node="COMPSsWorker01" \
    --agent_port="46101" \
    --comm="es.bsc.compss.agent.comm.CommAgentAdaptor" \
    --cpu=1 \
    "COMPSsWorker04" "Port=46402" > >(tee -a "${output_log}")  2> >(tee -a "${error_log}") 
sleep 1


# CHECK WHETHER THE Workers were properly set on AGENT 1
RESOURCES=$(curl -XGET http://127.0.0.1:46101/COMPSs/resources 2>/dev/null)
num_RESOURCES=$(echo "${RESOURCES}" | jq '.resources | length')
if [ ! "${num_RESOURCES}" == "4" ]; then
    echo "Wrong number of RESOURCE tags on the agent 1's output. Found ${num_RESOURCES}; 4 expected." > >(tee -a "${error_log}")
    exit 1
fi

# ---------------------------------------
# -------- EXECUTING OPERATION ----------
# ---------------------------------------
"${COMPSS_HOME}/Runtime/scripts/user/compss_agent_call_operation" \
    --master_node="127.0.0.1" \
    --master_port="46101" \
    --cei="tracing.DemoClassItf" \
    --stop \
    --forward_to="COMPSsWorker02:46201;COMPSsWorker03:46301;COMPSsWorker04:46401" \
    tracing.DemoClass "2" > >(tee -a "${output_log}") 2> >(tee -a "${error_log}")

sleep 3

if [ ! "$?" == "0" ]; then
    echo "Could not invoke main method." > >(tee -a "${error_log}")
    exit 1
fi
echo "main function invoked" > >(tee -a "${output_log}")

retries="3"
while [ ! -f "${agent1_log_dir}/jobs/job1_NEW.out" ] && [ "${retries}" -gt "0" ]; do
    sleep 1
    retries=$((retries - 1 ))
done
if [ ! -f "${agent1_log_dir}/jobs/job1_NEW.out" ]; then
    echo "Could not invoke main method." > >(tee -a "${error_log}")
    exit 1
fi
sleep 1
method_name=$( grep "Executing" "${agent1_log_dir}/jobs/job1_NEW.out" | awk '{print $2}')
echo method_name $method_name
if [ ! "${method_name}" == "main" ]; then
    echo "Could not invoke main method." > >(tee -a "${error_log}")
    exit 1
fi
echo  "main method properly started" > >(tee -a "${output_log}")
sleep 2

compss_agent_merge_traces \
    --result_trace_name="${app_name}" \
    -f \
    --output_dir="${log_dir}/resultatTraceMerge" \
    "${agent1_log_dir}" "${agent2_log_dir}" "${agent3_log_dir}" "${agent4_log_dir}" 

# Check timeout
exit_code=$?
if [[ "${exit_code}" = "124" ]]; then
    # Copy LOG files
    cp -rf "${COMPSs_log_folder}/${app_name}_0${retry_num}"/* "${target_log_folder}"
    
    # Report time out
    echo "[WARNING] Java Application timed out" >> "${output_log}"
    exit_value=124
else
    #echo "Application finished with value ${exit_code}. Checking results" 	  
    # Copy LOG files
    cp -rf "${COMPSs_log_folder}/${app_name}_0${retry_num}"/* "${target_log_folder}"


    # Check result
    python "${base_app_dir}"/result.py "${agent1_log_dir}/trace" "${agent2_log_dir}/trace" "${agent3_log_dir}/trace" "${agent4_log_dir}/trace" "${log_dir}/resultatTraceMerge"
    exit_value=$?
    echo "Result script finished with value ${exit_value}"
fi

#----------------------------------------------------------------------------------
# Return execution status
exit ${exit_value}
